result = rbind(result, data.frame('time'=passive_time_list, 'damage'=rep(damage,length(passive_time_list)), 'type'=rep('Energized',length(passive_time_list))))}
if(grepl('spellblade',p)){damage=attack*as.numeric(substr(p,13,16));interval=as.numeric(substr(p,33,35))+0.5
passive_time_list=seq(0,300,by=interval);damage_list=rep(damage,length(passive_time_list));type_list=rep('SpellBlade', length(passive_time_list))
result = rbind(result, data.frame('time'=passive_time_list, 'damage'=damage_list, 'type'=type_list))}
if(grepl('stack',p)){stack=as.numeric(substr(p,8,8)); t=as.numeric(substr(p,42,42)); extra=stack*t
result = rbind(result, data.frame('time'=time_list, 'damage'=rep(extra,length(time_list)), 'type'=rep('Stack',length(time_list))))}
if(grepl('magicresist',p)){change=as.numeric(substr(p,14,18));resist=resist+change}
}
a = list(result, resist)
a
}
rr = passive(rpassive, result, time_list, rtable$CriticalStrikeChance[1], resist)
result = rr[[1]]
resist = rr[[2]]
# Adjust damage by armor, resist and Ashe's passive.
result$time = as.numeric(result$time)
result$damage = as.numeric(result$damage)
result$damage = bonus_rate_multiply*result$damage
armor_ratio = 100/(100+armor)
resist_ratio = 100/(100+resist)
for (i in 1:nrow(result)){
if (result[i,3] %in% c('R', 'Bleed', 'Energized')){result[i,2]=result[i,2]*resist_ratio}
else{result[i,2]=result[i,2]*armor_ratio}}
result
}
adj_ashe = function(result){
result$time = ceiling(result$time)
sum = tapply(result$damage, list(result$time, result$type), sum)
c = ncol(sum)
nd = data.frame('time'=as.numeric(rownames(sum)), 'damage'=sum[,1], 'type'=colnames(sum)[1])
if(c>=2){for (i in 2:c){nd = rbind(nd, data.frame('time'=as.numeric(rownames(sum)), 'damage'=sum[,i], 'type'=colnames(sum)[i]))}}
nd = nd[complete.cases(nd),]
rownames(nd) = NULL
nd
}
a = Ashe(champions, 10, item, spells, c(0,1,1,1),0,0)
View(a)
View(a)
a = Ashe(champions, 10, item, spells, c(1,0,1,1),0,0)
View(a)
a = Ashe(champions, 10, item, spells, c(0,0,0,1),0,0)
View(a)
b = adj_ashe(a)
View(b)
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
View(a)
a = Ashe(champions, 1, item, spells, c(1,0,0,1),0,0)
View(a)
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
a = Ashe(champions, 1, item, spells, c(1,0,0,1),0,0)
View(a)
View(a)
View(a)
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
c = total_damage(a, 30)
View(a)
total_damage <- function(matrix, seconds){
matrix <- matrix[order(matrix[,1])]
matrix[,1] <- as.numeric(matrix[,1])
damage <- 0
spells <- c()
for (i in 1:nrow(matrix)){
if (matrix[i,1]>seconds){break}else{
damage = damage + matrix[i,2]
spells = c(spells, matrix[i,3])
}}
table = table(spells)
list(damage, table)
}
c = total_damage(a, 30)
View(a)
nrow(a)
a[1,1]
a[1,3]
a[2,4]
a[2,2]
total_damage <- function(matrix, seconds){
matrix <- matrix[order(matrix[,1])]
matrix[,1] <- as.numeric(matrix[,1])
damage <- 0
spells <- c()
for (i in 1:nrow(matrix)){
if (matrix[i,1]>seconds){break}
else{
damage = damage + matrix[i,2]
spells = c(spells, as.character(matrix[i,3]))
}
}
table = table(spells)
list(damage, table)
}
c = total_damage(a, 30)
total_damage <- function(matrix, seconds){
matrix <- matrix[order(matrix[,1]),]
matrix[,1] <- as.numeric(matrix[,1])
damage <- 0
spells <- c()
for (i in 1:nrow(matrix)){
if (matrix[i,1]>seconds){break}
else{
damage = damage + matrix[i,2]
spells = c(spells, as.character(matrix[i,3]))
}
}
table = table(spells)
list(damage, table)
}
c = total_damage(a, 30)
c
c[[2]]
total_damage <- function(matrix, seconds){
matrix <- matrix[order(matrix[,1]),]
matrix[,1] <- as.numeric(matrix[,1])
damage <- 0
Behaviors <- c()
for (i in 1:nrow(matrix)){
if (matrix[i,1]>seconds){break}
else{
damage = damage + matrix[i,2]
Behaviors = c(Behaviors, as.character(matrix[i,3]))
}
}
table = table(spells)
list(damage, table)
}
c = total_damage(a, 30)
c[[2]]
c[[1]]
c[2]
total_damage <- function(matrix, seconds){
matrix <- matrix[order(matrix[,1]),]
matrix[,1] <- as.numeric(matrix[,1])
damage <- 0
Behaviors <- c()
for (i in 1:nrow(matrix)){
if (matrix[i,1]>seconds){break}
else{
damage = damage + matrix[i,2]
Behaviors = c(Behaviors, as.character(matrix[i,3]))
}
}
table = table(Behaviors)
list(damage, table)
}
c = total_damage(a, 30)
c
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
second_need <- function(matrix, damage){
matrix <- matrix[order(matrix[,1]),]
matrix[,1] <- as.numeric(matrix[,1])
did <- 0
Behaviors <- c()
for(i in 1:nrow(matrix)){
did = did + matrix[i,2]
Behaviors <- c(Behaviors, as.character(matrix[i,3]))
if(did >= damage){second <- round(matrix[i,1]); break}
}
table = table(Behaviors)
list(second, Behaviors)
}
c = second_need(a,1000)
c
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
second_need <- function(matrix, damage){
matrix <- matrix[order(matrix[,1]),]
matrix[,1] <- as.numeric(matrix[,1])
did <- 0
Behaviors <- c()
for(i in 1:nrow(matrix)){
did = did + matrix[i,2]
if(matrix[i,3] %in% c('Q','W','E','R','Basic')){Behaviors = c(Behaviors, as.character(matrix[i,3]))}
if(did >= damage){second <- round(matrix[i,1]); break}
}
table = table(Behaviors)
list(second, table)
}
second_need(a, 1000)
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
deployApp(Appname='LOL')
library(rsconnect)
deployApp(Appname='LOL')
deployApp(AppName='LOL')
deployApp(name='LOL')
deployApp(Name='LOL')
deployApp()
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
deployApp()
shinyapps::setAccountInfo(name='dmindemon', token='155DC49A55841A3DDF2D28DFA7E3DCE9', secret='57ACrlVj74T7aISOSAuz6zbJC756TdOtI/fjvde+')
deployApp()
deployApp('LOL')
deployApp()
deployApp(appName='LOL')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
View(items)
nnn <- items[-1:-9,]
View(nnn)
nnn <- nnn[order(nnn$name),]
View(nnn)
rownames(nnn)=NULL
View(nnn)
nnn$X=NULL
View(nnn)
write.csv(nnn,'dictionaryimage.csv')
getwd()
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
deployApp()
library(rconnect)
library(rsconnect)
deployApp()
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
library(rsconnect)
deployApp()
library(jiebaRD)
library(jiebaRD)
install.packages("jiebaR")
library(jiebaR)
library("jiebaR")
install.packages("jiebaR")
install.packages("jiebaRD")
library("jiebaRD")
install.packages("jiebaR")
mixseg = worker()
setwd("~/Desktop/WorkMarket_Challenges")
data = read.csv("NYC_jobs.csv")
View(data)
str(data)
names(data)
table(data$Agency)
sort(table(data$Agency))
sort(table(data$Agency), decreasing=T)
sort(table(data$Agency), decreasing=T)[1]
names(data)
View(data)
summary(data$Salary.Frequency)
tapply(data$Salary.Range.From, data$Salary.Frequency, which.min)
which.min(data$Salary.Range.From)
data$Agency(tapply(data$Salary.Range.From, data$Salary.Frequency, which.min))
data$Agency[tapply(data$Salary.Range.From, data$Salary.Frequency, which.min))]
data$Agency[tapply(data$Salary.Range.From, data$Salary.Frequency, which.min)]
tapply(data$Salary.Range.From, data$Salary.Frequency, which.min)
View(data)
data$Agency[tapply(data$Salary.Range.To, data$Salary.Frequency, which.max)]
df_salary = as.data.frame(rbind(min,max))
df_salary = as.data.frame(rbind(as.vector(min), as.vector(max)))
min
max
data$Agency[tapply(data$Salary.Range.From, data$Salary.Frequency, which.min)]
min = data$Agency[tapply(data$Salary.Range.From, data$Salary.Frequency, which.min)]
min
min = data$Agency[tapply(data$Salary.Range.From, data$Salary.Frequency, which.min)]
max = data$Agency[tapply(data$Salary.Range.To, data$Salary.Frequency, which.max)]
col_name = c('Annual', 'Daily', 'Hourly')
row_name = c('min', 'max')
df_salary = as.data.frame(rbind(min, max))
View(df_salary)
min
View(df_salary)
names(df_salary) = col_name
View(df_salary)
df_salary = as.data.frame(rbind(as.character(min), max))
names(df_salary) = col_name
View(df_salary)
df_salary = as.data.frame(rbind(as.character(min), as.character(max)))
names(df_salary) = col_name
View(df_salary)
rownames(df_salary)
rownames(df_salary) = c('min', 'max')
View(df_salary)
summary(data)
View(data)
names(data)
sort(table(data$Agency), decreasing=T)[1]
nrows(data)
nrow(data)
unique(data$Job.ID)
nrow(unique(data$Job.ID))
length(unique(data$Job.ID))
nrow(data)
repost_id = table(data$Job.ID)
repost_id = sort(table(data$Job.ID), decreasing=T)
sort(table(data$Job.ID), decreasing=T)
repost_ids = sort(table(data$Job.ID), decreasing=T)[ort(table(data$Job.ID), decreasing=T)>1]
repost_ids = sort(table(data$Job.ID), decreasing=T)[sort(table(data$Job.ID), decreasing=T)>1]
repost_ids
repost_ids = names(sort(table(data$Job.ID), decreasing=T)[sort(table(data$Job.ID), decreasing=T)>1])
repost_ids
repost_ids = as.numeric(repost_ids)
repost_ids
df_repost = subset(data, data$Job.ID in repost_ids)
df_repost = subset(data, data$Job.ID %in% repost_ids)
View(df_repost)
sort(table(df_repost$Job.ID), decreasing=T)
View(df_repost)
df_repost$Posting.Date == df_repost$Posting.Updated
df_repost$Posting.Date
df_repost$Posting.Updated
as.charecter(df_repost$Posting.Date) == as.charecter(df_repost$Posting.Updated)
as.character(df_repost$Posting.Date) == as.character(df_repost$Posting.Updated)
sum(as.character(df_repost$Posting.Date) != as.character(df_repost$Posting.Updated))
library(lubridate)
ymd_hms(df_repost$Posting.Date[1])
mdy_hms(df_repost$Posting.Date[1])
df_repost$Posting.Date = mdy_hms(df_repost$Posting.Date)
df_repost$Posting.Updated = mdy_hms(df_repost$Posting.Updated)
View(df_repost)
min(df_repost$Posting.Date)
tapply(df_repost[c("Posting.Date","Posting.Updated")], df_repost$Job.ID, range)
head(df_repost[c("Posting.Date","Posting.Updated")])
range = function(times){
times = as.vector(times)
period = max(times) - min(times)
period
}
tapply(df_repost[c("Posting.Date","Posting.Updated")], df_repost$Job.ID, range)
as.vector(head(df_repost[c("Posting.Date","Posting.Updated")]))
range = function(times){
period = max(c(times[1], times[2])) - min(c(times[1], times[2]))
period
}
tapply(df_repost[c("Posting.Date","Posting.Updated")], df_repost$Job.ID, range)
h = head(df_repost[c("Posting.Date","Posting.Updated")])
h
h[1]
h[2]
c(h[1],h[2])
h[1]
as.vector(h[1])
class(h[1])
as.vector(h[1])
as.list(h[1])
as.vector(as.list(h[1]))
range = function(times){
period = max(c(as.list(times[1]), as.list(times[2]))) - min(c(as.list(times[1]), as.list(times[2])))
period
}
tapply(df_repost[c("Posting.Date","Posting.Updated")], df_repost$Job.ID, range)
h
range(h)
min(h[1])
h
min(h[1])
min(df_repost$Posting.Date)
range = function(times){
min = c(min(times[1]), min(times[2]))
max = c(max(times[1]), max(times[2]))
period = max - min
period
}
h
range(h)
range(df_repost[c("Posting.Date","Posting.Updated")])
df_repost$Posting.Date = mdy_hms(df_repost$Posting.Date)
df_repost = subset(data, data$Job.ID %in% repost_ids)
df_repost$Posting.Date = mdy_hms(df_repost$Posting.Date)
df_repost$Posting.Updated = mdy_hms(df_repost$Posting.Updated)
h = head(df_repost[c("Posting.Date","Posting.Updated")])
h
range(h)
min(h[1])
min(df_repost$Posting.Date)
tapply(df_repost[c("Posting.Date","Posting.Updated")], df_repost$Job.ID, range)
range = function(alist, blist, group){
min = c(tapply(alist, group, min), tapply(blist, group, min))
max = c(tapply(alist, group, max), tapply(blist, group, max))
result = max - min
result
}
range(df_repost$Posting.Date, df_repost$Posting.Updated, df_repost$Job.ID)
range = function(alist, blist, group){
min = c(tapply(alist, group, min), tapply(blist, group, min))
max = c(tapply(alist, group, max), tapply(blist, group, max))
result = max - min
result
min
}
range(df_repost$Posting.Date, df_repost$Posting.Updated, df_repost$Job.ID)
range = function(alist, blist, group){
min = tapply(alist, group, min)
max = tapply(blist, group, max)
result = max - min
result
}
range(df_repost$Posting.Date, df_repost$Posting.Updated, df_repost$Job.ID)
df_repost$Posting.Date[1] - df_repost$Posting.Date[2]
r = range(df_repost$Posting.Date, df_repost$Posting.Updated, df_repost$Job.ID)
r[1]
r[2]
min(df_repost$Posting.Date)
max(df_repost$Posting.Date)
max(df_repost$Posting.Date) - min(df_repost$Posting.Date)
tapply(df_repost$Posting.Date, df_repost$Job.ID, min)
range = function(alist, blist, group){
min = tapply(alist, group, min)
max = tapply(blist, group, max)
result = max - min
strptime(result)
}
r = range(df_repost$Posting.Date, df_repost$Posting.Updated, df_repost$Job.ID)
range = function(alist, blist, group){
min = tapply(alist, group, min)
max = tapply(blist, group, max)
result = max - min
as.Date(result)
}
r = range(df_repost$Posting.Date, df_repost$Posting.Updated, df_repost$Job.ID)
r
as.Date(123)
as.Date.POSIXct(123)
as.Date.POSIXct(1)
as.Date.POSIXct(1222222)
class(df_repost$Posting.Date)
Date(123123)
range = function(alist, blist, group){
min = as.Date.POSIXct(tapply(alist, group, min))
max = as.Date.POSIXct(tapply(blist, group, max))
result = max - min
}
r = range(df_repost$Posting.Date, df_repost$Posting.Updated, df_repost$Job.ID)
r
um(as.character(df_repost$Posting.Date) > as.character(df_repost$Posting.Updated))
sum(as.character(df_repost$Posting.Date) > as.character(df_repost$Posting.Updated))
sum(as.character(df_repost$Posting.Date) < as.character(df_repost$Posting.Updated))
min(123,123)
min(123,22)
range = function(alist, blist, group){
min = as.Date.POSIXct(min(tapply(alist, group, min), tapply(blist, group, min)))
max = as.Date.POSIXct(max(tapply(alist, group, max), tapply(blist, group, max)))
result = max - min
}
r = range(df_repost$Posting.Date, df_repost$Posting.Updated, df_repost$Job.ID)
r
range = function(alist, blist, group){
min = as.Date.POSIXct(lappy(tapply(alist, group, min), tapply(blist, group, min)), min)
max = as.Date.POSIXct(lappy(tapply(alist, group, max), tapply(blist, group, max)), max)
result = max - min
}
r = range(df_repost$Posting.Date, df_repost$Posting.Updated, df_repost$Job.ID)
range = function(alist, blist, group){
min = as.Date.POSIXct(tapply(alist, group, min))
max = as.Date.POSIXct(tapply(blist, group, max))
result = max - min
}
r = range(df_repost$Posting.Date, df_repost$Posting.Updated, df_repost$Job.ID)
r
range = function(alist, blist, group){
min = as.Date.POSIXct(tapply(alist, group, min))
max = as.Date.POSIXct(tapply(blist, group, max))
result = max - min
result = sort(result, decreasing = T)
}
r = range(df_repost$Posting.Date, df_repost$Posting.Updated, df_repost$Job.ID)
r
top_10 = r[1:10]
top_10
Who has the most openings?
```{r, echo=FALSE}
data = read.csv(url)
url = url("https://data.cityofnewyork.us/api/views/kpav-sd4t/rows.csv?accessType=DOWNLOAD")
data = read.csv(url)
data = read.csv(link)
1. Importing data from web.
```{r, cache=TRUE}
link = url("https://data.cityofnewyork.us/api/views/kpav-sd4t/rows.csv?accessType=DOWNLOAD")
data = read.csv(link)
```
link = url("https://data.cityofnewyork.us/api/views/kpav-sd4t/rows.csv?accessType=DOWNLOAD")
data = read.csv(link)
URL = "https://data.cityofnewyork.us/api/views/kpav-sd4t/rows.csv?accessType=DOWNLOAD"
download.file(URL, destfile = "./data.csv", method="curl")
data = read.csv('data.csv')
```
## Determine:
#### Importing Data
install.packages('printr')
library(printr)
names(top_10) = c('Job ID', "Period: 1st posted - last reposted")
